/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sha512gui;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import sha512.SHA512;

/**
 *
 * @author moh.afifun.naily - 1106016802
 * @author haris.dwi - 1206239011
 */
public class SHA512GUI extends javax.swing.JFrame {

    public File plaintextFile;
    public File ciphertextFile;
    public File keyEncriptFile;
    public File keyDecryptFile;
    public SHA512 des;

    /**
     * Creates new form SHA512StreamChipher
     */
    public SHA512GUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        EncryptionPanel = new javax.swing.JPanel();
        encryptionButton = new javax.swing.JButton();
        PlaintextLabel = new javax.swing.JLabel();
        KeyEncryptLabel = new javax.swing.JLabel();
        KeyEncryptButton = new javax.swing.JButton();
        plaintextButton = new javax.swing.JButton();
        copyrightLabelEnkripsi = new javax.swing.JLabel();
        encryptionButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        encryptionButton.setFont(new java.awt.Font("Comic Sans MS", 0, 11)); // NOI18N
        encryptionButton.setText("Compute");
        encryptionButton.setInheritsPopupMenu(true);
        encryptionButton.setName(""); // NOI18N
        encryptionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encryptionButtonActionPerformed(evt);
            }
        });

        PlaintextLabel.setText("Input file to encrypt");
        PlaintextLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        KeyEncryptLabel.setText("Input key file");
        KeyEncryptLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        KeyEncryptButton.setFont(new java.awt.Font("Comic Sans MS", 0, 11)); // NOI18N
        KeyEncryptButton.setText("Input Hex");
        KeyEncryptButton.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        KeyEncryptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                KeyEncryptButtonActionPerformed(evt);
            }
        });

        plaintextButton.setFont(new java.awt.Font("Comic Sans MS", 0, 11)); // NOI18N
        plaintextButton.setText("Input File");
        plaintextButton.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        plaintextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plaintextButtonActionPerformed(evt);
            }
        });

        copyrightLabelEnkripsi.setText("Developed By : Moh. Afifun Naily & Haris Dwi Prakoso");

        encryptionButton1.setFont(new java.awt.Font("Comic Sans MS", 0, 11)); // NOI18N
        encryptionButton1.setText("authenticate");
        encryptionButton1.setInheritsPopupMenu(true);
        encryptionButton1.setName(""); // NOI18N
        encryptionButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encryptionButton1ActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(jTextPane1);

        jLabel1.setText("Output");

        javax.swing.GroupLayout EncryptionPanelLayout = new javax.swing.GroupLayout(EncryptionPanel);
        EncryptionPanel.setLayout(EncryptionPanelLayout);
        EncryptionPanelLayout.setHorizontalGroup(
            EncryptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EncryptionPanelLayout.createSequentialGroup()
                .addComponent(copyrightLabelEnkripsi)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, EncryptionPanelLayout.createSequentialGroup()
                .addContainerGap(76, Short.MAX_VALUE)
                .addGroup(EncryptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(EncryptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(EncryptionPanelLayout.createSequentialGroup()
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addContainerGap())
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, EncryptionPanelLayout.createSequentialGroup()
                            .addGroup(EncryptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(EncryptionPanelLayout.createSequentialGroup()
                                    .addComponent(encryptionButton)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(encryptionButton1))
                                .addGroup(EncryptionPanelLayout.createSequentialGroup()
                                    .addGroup(EncryptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(PlaintextLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE)
                                        .addComponent(KeyEncryptLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGap(18, 18, 18)
                                    .addGroup(EncryptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(plaintextButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(KeyEncryptButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                            .addGap(77, 77, 77)))))
        );
        EncryptionPanelLayout.setVerticalGroup(
            EncryptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EncryptionPanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(EncryptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PlaintextLabel)
                    .addComponent(plaintextButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(EncryptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(KeyEncryptLabel)
                    .addComponent(KeyEncryptButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(EncryptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(encryptionButton)
                    .addComponent(encryptionButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(copyrightLabelEnkripsi))
        );

        jTabbedPane1.addTab("SHA-512 Encryption", EncryptionPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void encryptionButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encryptionButton1ActionPerformed
        // TODO add your handling code here:
        authenticate(plaintextFile, keyEncriptFile);
    }//GEN-LAST:event_encryptionButton1ActionPerformed

    private void plaintextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plaintextButtonActionPerformed
        JFileChooser fc = new JFileChooser();
        int ret = fc.showOpenDialog(null);

        if (ret == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            if (file == null) {
                JOptionPane.showMessageDialog(this, "Pastikan file yang inputkan benar", "Input Salah", JOptionPane.ERROR_MESSAGE);
            } else {
                String filename = file.getAbsolutePath();
                PlaintextLabel.setText(filename);
                this.plaintextFile = file;
            }
        }
    }//GEN-LAST:event_plaintextButtonActionPerformed

    private void KeyEncryptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_KeyEncryptButtonActionPerformed
        JFileChooser fc = new JFileChooser();
        int ret = fc.showOpenDialog(null);

        if (ret == JFileChooser.APPROVE_OPTION) {
            
            File file = fc.getSelectedFile();
            String filename = file.getAbsolutePath();
            KeyEncryptLabel.setText(filename);
            this.keyEncriptFile = file;
        }
    }//GEN-LAST:event_KeyEncryptButtonActionPerformed

    private void encryptionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encryptionButtonActionPerformed
        compute(plaintextFile);
    }//GEN-LAST:event_encryptionButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException e) {
                    e.printStackTrace();
                }
                SHA512GUI window = new SHA512GUI();
                window.setTitle("SHA512 Application");
                window.setVisible(true);
            }
        });
    }

    public String getFileExtension(File file) {
        String fileName = file.getName();
        if (fileName.lastIndexOf(".") > 0) {
            return fileName.substring(fileName.lastIndexOf("."));
        } else {
            return "";
        }
    }

    public void compute(File file) {
        String inDir = file.getAbsolutePath();
        String outDir = inDir.substring(0, inDir.lastIndexOf(File.separator)) + File.separator + "r_" + file.getName();
        doSHA512(file, null, outDir, 0);
    }

    public void authenticate(File file, File key) {
        String inDir = file.getAbsolutePath();
        String outDir = inDir.substring(0, inDir.lastIndexOf(File.separator)) + File.separator + "D_" + file.getName();
        doSHA512(file, key, outDir, 1);
    }

    public void doSHA512(File docInput, File hashInput, String resultPath, int status) {
        // TODO add your handling code here:
        try {

            if (status == 0) {
                
                if (docInput == null) {
                    JOptionPane.showMessageDialog(this, "Input file kosong", "Input belum lengkap", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                //membaca file
                Path pathFile = Paths.get(docInput.getAbsolutePath());
                byte[] bytesFile = Files.readAllBytes(pathFile);
                
                SHA512 shaObj = new SHA512();
                String hexFile =  shaObj.convertBytestoHexa(bytesFile);
                String result = shaObj.digest(hexFile);
                
                System.out.println(result);
                
                FileWriter fw = new FileWriter(resultPath);
                BufferedWriter bw = new BufferedWriter(fw);
                bw.write(result);
		bw.close();
                
                jTextPane1.setText("Enkripsi Berhasil... \nHasil enkripsi tersimpan di :\n" + resultPath);
//                JOptionPane.showMessageDialog(this, "Enkripsi telah selesai", "Finish", JOptionPane.INFORMATION_MESSAGE);
            } else {
                
                if (docInput == null) {
                    JOptionPane.showMessageDialog(this, "Input file kosong", "Input belum lengkap", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                if (hashInput == null) {
                    JOptionPane.showMessageDialog(this, "Input file hex kosong", "Input belum lengkap", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                //membaca file
                Path pathFile = Paths.get(docInput.getAbsolutePath());
                byte[] bytesFile = Files.readAllBytes(pathFile);
                
                //membaca file hash
                Path pathHashFile = Paths.get(hashInput.getAbsolutePath());
                FileReader file = new FileReader(pathHashFile.toString());
                BufferedReader br = new BufferedReader(file);
                String hashFileContent = br.readLine();
                byte[] bytesHashFile = Files.readAllBytes(pathHashFile);
                
                System.out.println(pathHashFile.toString());
                SHA512 shaObj = new SHA512();
                String hexFile =  shaObj.convertBytestoHexa(bytesFile);
                String result = shaObj.digest(hexFile);
                
                System.out.println("hashFile : " + hashFileContent);
                System.out.println("hexFile : " + result);
                
                if(hashFileContent.equals(result)){
//                    JOptionPane.showMessageDialog(this, "Otentikasi berhasil", "Finish", JOptionPane.INFORMATION_MESSAGE);
                    
                    jTextPane1.setText("Otentikasi File Berhasil...");
                }
                else {
//                    JOptionPane.showMessageDialog(this, "Otentikasi gagal", "Finish", JOptionPane.INFORMATION_MESSAGE);
                    jTextPane1.setText("Otentikasi File Gagal ...");
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel EncryptionPanel;
    private javax.swing.JButton KeyEncryptButton;
    private javax.swing.JLabel KeyEncryptLabel;
    private javax.swing.JLabel PlaintextLabel;
    private javax.swing.JLabel copyrightLabelEnkripsi;
    private javax.swing.JButton encryptionButton;
    private javax.swing.JButton encryptionButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JButton plaintextButton;
    // End of variables declaration//GEN-END:variables

    private int[] genarate64BitKey(String key) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
